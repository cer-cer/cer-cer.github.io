{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Setup mkdocs in MacOS with theme and extension","text":""},{"location":"#setup-python-enviroment","title":"Setup Python enviroment","text":"<p>Since the mkdocs is coded by Python, so you have to set up the python env first. Currently the mkdocs's verison is 2.16, it is supproted by python 3.8+.</p> <p>It's so diffcult to a C deeloper.</p> <ul> <li>First, you should install python in MacOS.<ul> <li>It's not friendly in MacOS, since it was already have one python but with a lower version.</li> <li>you could install the new version by <code>Brew</code>, you could retrie the detail by Brew offical.</li> </ul> </li> <li>Second, after installed the python by brew, you could check it by command <code>brew list | grep python</code>.<ul> <li>And you could also find the detail by <code>brew list python</code>. which will display the install path.</li> </ul> </li> </ul> <pre><code>python\npython-setuptools\npython@3.11\npython@3.13\n</code></pre> <ul> <li>After that, unfounture, you still saw the old version python by MacOS. this is because the <code>PATH</code> can't get the new python. You could replace the old version python by system <code>alias</code> in your bash profile.</li> </ul> <p>I added this in the <code>.bash_profile</code>, which will be executed when terminate opened.</p> <pre><code>alias python=python3\nalias pip=pip3\n</code></pre> <ul> <li>You could check your python version, which will display the newest vesion which you installed by brew.</li> </ul>"},{"location":"#setup-python-virtual-env","title":"Setup python virtual env.","text":"<ul> <li>Install the pipenv by brew. This step is simple.</li> </ul>"},{"location":"#setup-mkdocs","title":"Setup mkdocs.","text":"<p>We will install the mkdocs by python virtual env, which will isolate the python package for every project.</p> <ul> <li>Create a new directory for your new project. like <code>mkdir testPrj</code>.</li> <li>Enter this new directory, and then initliazation the python virtual env by command <code>cd testPrj &amp; pipenv shell</code>.</li> <li>Install mkdocs in virtual env by command <code>pipenv install mkdocs</code>.</li> </ul>"},{"location":"#initlization-the-mkdocs-project","title":"Initlization the <code>mkdocs</code> project.","text":"<ul> <li>Run command <code>mkdocs new .</code>. the <code>.</code> means current directory.</li> <li>Run command <code>mkdocs serve</code>, then you could see the output that new project is running. Open the browser to check the wiki page. The url you could get by the output, like <code>http://127.0.0.1:8000/</code>.</li> </ul>"},{"location":"#install-theme","title":"Install theme.","text":"<ul> <li>Go to mkdocs-material offical, you could get the <code>install</code>. but don't forget to replace the <code>pip</code> command by <code>pipenv</code>.</li> <li>Run <code>pipenv install mkdocs-material</code>.</li> <li>Config the <code>mkdocs.yml</code>.</li> </ul>"},{"location":"#install-markdown_krokis","title":"Install markdown_krokis","text":"<ul> <li>Same with <code>theme</code>, you MUST install the <code>markdown_kroki</code> first. I use this extension since i want to test the <code>plantuml</code> by it.</li> </ul>"},{"location":"#example","title":"Example","text":""}]}